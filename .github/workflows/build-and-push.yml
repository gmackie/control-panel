name: Build and Push Control Panel

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test -- --coverage --watchAll=false

    - name: Build application
      run: npm run build

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        target: frontend

  build-backend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest

    - name: Run backend tests
      run: |
        python -m pytest tests/ -v --cov=src/

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Backend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        target: backend

  build-ai-services:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [incident-prediction, capacity-planning, root-cause-analysis, resource-optimization, anomaly-detection]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install AI service dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r ai-services/requirements.txt

    - name: Test AI service
      run: |
        python -m pytest ai-services/tests/test_${{ matrix.service }}.py -v

    - name: Log in to Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for AI service
      id: meta-ai
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push AI service image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./ai-services/Dockerfile.${{ matrix.service }}
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta-ai.outputs.tags }}
        labels: ${{ steps.meta-ai.outputs.labels }}

  security-scan:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-dev:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-ai-services]
    if: github.ref == 'refs/heads/develop'
    environment: development

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to development cluster
      run: |
        echo "Deploying to development environment..."
        # This would trigger ArgoCD or other deployment mechanism
        curl -X POST "${{ secrets.DEV_WEBHOOK_URL }}" \
          -H "Authorization: Bearer ${{ secrets.DEV_WEBHOOK_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop",
            "environment": "development"
          }'

  deploy-prod:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-ai-services, security-scan]
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to production cluster
      run: |
        echo "Deploying to production environment..."
        # This would trigger ArgoCD or other deployment mechanism
        curl -X POST "${{ secrets.PROD_WEBHOOK_URL }}" \
          -H "Authorization: Bearer ${{ secrets.PROD_WEBHOOK_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{
            "image": "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}",
            "environment": "production"
          }'

  update-deployment-configs:
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend, build-ai-services]
    if: github.event_name != 'pull_request'

    steps:
    - name: Checkout deployment configs
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository_owner }}/gmac-io-ci
        token: ${{ secrets.CI_PAT }}
        path: deployment-configs

    - name: Update image tags in deployment configs
      run: |
        cd deployment-configs
        
        # Extract tag from metadata
        if [[ "${{ github.ref }}" =~ ^refs/tags/v ]]; then
          IMAGE_TAG="${{ github.ref_name }}"
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          IMAGE_TAG="latest"
        else
          IMAGE_TAG="${{ github.ref_name }}"
        fi
        
        # Update control panel deployment
        sed -i "s|ghcr.io/${{ github.repository }}:.*|ghcr.io/${{ github.repository }}:${IMAGE_TAG}|g" \
          components/control-panel/deployment.yaml
        
        # Update AI services deployments
        for service in incident-prediction capacity-planning root-cause-analysis resource-optimization anomaly-detection; do
          if [[ -f "components/control-panel/ai-services/${service}.yaml" ]]; then
            sed -i "s|ghcr.io/${{ github.repository }}-${service}:.*|ghcr.io/${{ github.repository }}-${service}:${IMAGE_TAG}|g" \
              components/control-panel/ai-services/${service}.yaml
          fi
        done

    - name: Commit updated deployment configs
      run: |
        cd deployment-configs
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git commit -m "Update control panel images to ${{ github.sha }}" || exit 0
        git push