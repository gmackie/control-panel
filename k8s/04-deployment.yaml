apiVersion: apps/v1
kind: Deployment
metadata:
  name: control-panel
  namespace: control-panel
  labels:
    app.kubernetes.io/name: control-panel
    app.kubernetes.io/component: web
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app.kubernetes.io/name: control-panel
      app.kubernetes.io/component: web
  template:
    metadata:
      labels:
        app.kubernetes.io/name: control-panel
        app.kubernetes.io/component: web
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        prometheus.io/path: "/api/metrics"
    spec:
      serviceAccountName: control-panel
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
      - name: control-panel
        image: ghcr.io/gmackie/control-panel:main
        imagePullPolicy: Always
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        env:
        # Load config from ConfigMap
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: NODE_ENV
        - name: NEXTAUTH_URL
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: NEXTAUTH_URL
        - name: GITEA_URL
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: GITEA_URL
        - name: DRONE_SERVER
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: DRONE_SERVER
        - name: HARBOR_URL
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: HARBOR_URL
        - name: ARGOCD_SERVER
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: ARGOCD_SERVER
        - name: PROMETHEUS_URL
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: PROMETHEUS_URL
        - name: K8S_API_SERVER
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: K8S_API_SERVER
        - name: DATABASE_HOST
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: DATABASE_PORT
        - name: DATABASE_NAME
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: DATABASE_NAME
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: control-panel-config
              key: REDIS_PORT
        
        # Integration configurations
        - name: GRAFANA_URL
          valueFrom:
            configMapKeyRef:
              name: control-panel-integrations
              key: GRAFANA_URL
        - name: HARBOR_PROJECT
          valueFrom:
            configMapKeyRef:
              name: control-panel-integrations
              key: HARBOR_PROJECT
        - name: GITEA_ORG
          valueFrom:
            configMapKeyRef:
              name: control-panel-integrations
              key: GITEA_ORG
        
        # Load secrets from Secret
        - name: NEXTAUTH_SECRET
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: NEXTAUTH_SECRET
        - name: GITHUB_CLIENT_ID
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: GITHUB_CLIENT_ID
        - name: GITHUB_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: GITHUB_CLIENT_SECRET
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: DATABASE_PASSWORD
        - name: GITEA_TOKEN
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: GITEA_TOKEN
        - name: DRONE_TOKEN
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: DRONE_TOKEN
        - name: HARBOR_USERNAME
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: HARBOR_USERNAME
        - name: HARBOR_PASSWORD
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: HARBOR_PASSWORD
        - name: ARGOCD_TOKEN
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: ARGOCD_TOKEN
        - name: WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: control-panel-secrets
              key: WEBHOOK_SECRET
        
        # Build DATABASE_URL from components
        - name: DATABASE_URL
          value: "postgresql://$(DATABASE_USER):$(DATABASE_PASSWORD)@$(DATABASE_HOST):$(DATABASE_PORT)/$(DATABASE_NAME)"

        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-liveness-probe"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
            httpHeaders:
            - name: User-Agent
              value: "k8s-readiness-probe"
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          successThreshold: 1
          failureThreshold: 3

        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 1001

      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      
      # Affinity rules for better pod distribution
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: control-panel
                  app.kubernetes.io/component: web
              topologyKey: kubernetes.io/hostname